{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/andri/git/andri.dk/components/social-icons/index.js\";\nimport React from \"react\";\nimport { FaTwitter as TwitterIcon, FaLinkedin as LinkedInIcon, FaGithub as GithubIcon } from \"react-icons/fa\";\n\nconst iconResolver = type => {\n  switch (type) {\n    case \"twitter\":\n      return TwitterIcon;\n\n    case \"linkedin\":\n      return LinkedInIcon;\n\n    case \"github\":\n      return GithubIcon;\n\n    default:\n      throw new Error(`Type '${type}' not found in iconResolver`);\n  }\n};\n\nconst linkResolver = (user, type) => {\n  switch (type) {\n    case \"twitter\":\n      return `https://www.twitter.com/${user}`;\n\n    case \"github\":\n      return `https://github.com/${user}`;\n\n    case \"linkedin\":\n      return `https://www.linkedin.com/in/${user}`;\n\n    default:\n      throw new Error(`Type '${type}' not found in linkResolver`);\n  }\n};\n\nconst BaseLink = (user, type) => {\n  const Icon = iconResolver(type);\n  const href = linkResolver(user, type);\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: href,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"mr-2\",\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      className: \"inline-block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport const Twitter = ({\n  user\n}) => BaseLink(user, \"twitter\");\nexport const LinkedIn = ({\n  user\n}) => BaseLink(user, \"linkedin\");\nexport const Github = ({\n  user\n}) => BaseLink(user, \"github\");","map":{"version":3,"sources":["/home/andri/git/andri.dk/components/social-icons/index.js"],"names":["React","FaTwitter","TwitterIcon","FaLinkedin","LinkedInIcon","FaGithub","GithubIcon","iconResolver","type","Error","linkResolver","user","BaseLink","Icon","href","Twitter","LinkedIn","Github"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,SAAS,IAAIC,WADf,EAEEC,UAAU,IAAIC,YAFhB,EAGEC,QAAQ,IAAIC,UAHd,QAIO,gBAJP;;AAMA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAC7B,UAAQA,IAAR;AACE,SAAK,SAAL;AACE,aAAON,WAAP;;AACF,SAAK,UAAL;AACE,aAAOE,YAAP;;AACF,SAAK,QAAL;AACE,aAAOE,UAAP;;AACF;AACE,YAAM,IAAIG,KAAJ,CAAW,SAAQD,IAAK,6BAAxB,CAAN;AARJ;AAUD,CAXD;;AAaA,MAAME,YAAY,GAAG,CAACC,IAAD,EAAOH,IAAP,KAAgB;AACnC,UAAQA,IAAR;AACE,SAAK,SAAL;AACE,aAAQ,2BAA0BG,IAAK,EAAvC;;AACF,SAAK,QAAL;AACE,aAAQ,sBAAqBA,IAAK,EAAlC;;AACF,SAAK,UAAL;AACE,aAAQ,+BAA8BA,IAAK,EAA3C;;AACF;AACE,YAAM,IAAIF,KAAJ,CAAW,SAAQD,IAAK,6BAAxB,CAAN;AARJ;AAUD,CAXD;;AAaA,MAAMI,QAAQ,GAAG,CAACD,IAAD,EAAOH,IAAP,KAAgB;AAC/B,QAAMK,IAAI,GAAGN,YAAY,CAACC,IAAD,CAAzB;AACA,QAAMM,IAAI,GAAGJ,YAAY,CAACC,IAAD,EAAOH,IAAP,CAAzB;AACA,sBACE;AAAG,IAAA,IAAI,EAAEM,IAAT;AAAe,IAAA,MAAM,EAAC,QAAtB;AAA+B,IAAA,GAAG,EAAC,qBAAnC;AAAyD,IAAA,SAAS,EAAC,MAAnE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CARD;;AAUA,OAAO,MAAMC,OAAO,GAAG,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAcC,QAAQ,CAACD,IAAD,EAAO,SAAP,CAAtC;AACP,OAAO,MAAMK,QAAQ,GAAG,CAAC;AAAEL,EAAAA;AAAF,CAAD,KAAcC,QAAQ,CAACD,IAAD,EAAO,UAAP,CAAvC;AACP,OAAO,MAAMM,MAAM,GAAG,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAcC,QAAQ,CAACD,IAAD,EAAO,QAAP,CAArC","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  FaTwitter as TwitterIcon,\r\n  FaLinkedin as LinkedInIcon,\r\n  FaGithub as GithubIcon,\r\n} from \"react-icons/fa\";\r\n\r\nconst iconResolver = (type) => {\r\n  switch (type) {\r\n    case \"twitter\":\r\n      return TwitterIcon;\r\n    case \"linkedin\":\r\n      return LinkedInIcon;\r\n    case \"github\":\r\n      return GithubIcon;\r\n    default:\r\n      throw new Error(`Type '${type}' not found in iconResolver`);\r\n  }\r\n};\r\n\r\nconst linkResolver = (user, type) => {\r\n  switch (type) {\r\n    case \"twitter\":\r\n      return `https://www.twitter.com/${user}`;\r\n    case \"github\":\r\n      return `https://github.com/${user}`;\r\n    case \"linkedin\":\r\n      return `https://www.linkedin.com/in/${user}`;\r\n    default:\r\n      throw new Error(`Type '${type}' not found in linkResolver`);\r\n  }\r\n};\r\n\r\nconst BaseLink = (user, type) => {\r\n  const Icon = iconResolver(type);\r\n  const href = linkResolver(user, type);\r\n  return (\r\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" className=\"mr-2\">\r\n      <Icon className=\"inline-block\" />\r\n    </a>\r\n  );\r\n};\r\n\r\nexport const Twitter = ({ user }) => BaseLink(user, \"twitter\");\r\nexport const LinkedIn = ({ user }) => BaseLink(user, \"linkedin\");\r\nexport const Github = ({ user }) => BaseLink(user, \"github\");\r\n"]},"metadata":{},"sourceType":"module"}
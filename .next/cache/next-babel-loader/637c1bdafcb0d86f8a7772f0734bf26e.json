{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/andri/git/andri.dk/src/components/social-icons/index.js\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { FaTwitter as TwitterIcon, FaLinkedin as LinkedInIcon, FaGithub as GithubIcon } from \"react-icons/fa\";\n\nvar iconResolver = function iconResolver(type) {\n  switch (type) {\n    case \"twitter\":\n      return TwitterIcon;\n\n    case \"linkedin\":\n      return LinkedInIcon;\n\n    case \"github\":\n      return GithubIcon;\n\n    default:\n      throw new Error(\"Type '\".concat(type, \"' not found in iconResolver\"));\n  }\n};\n\nvar linkResolver = function linkResolver(user, type) {\n  switch (type) {\n    case \"twitter\":\n      return \"https://www.twitter.com/\".concat(user);\n\n    case \"github\":\n      return \"https://github.com/\".concat(user);\n\n    case \"linkedin\":\n      return \"https://www.linkedin.com/in/\".concat(user);\n\n    default:\n      throw new Error(\"Type '\".concat(type, \"' not found in linkResolver\"));\n  }\n};\n\nvar BaseLink = function BaseLink(user, type) {\n  var Icon = iconResolver(type);\n  var href = linkResolver(user, type);\n  return __jsx(\"a\", {\n    href: href,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"mr-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    className: \"inline-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = BaseLink;\nexport var Twitter = function Twitter(_ref) {\n  var user = _ref.user;\n  return BaseLink(user, \"twitter\");\n};\n_c2 = Twitter;\nexport var LinkedIn = function LinkedIn(_ref2) {\n  var user = _ref2.user;\n  return BaseLink(user, \"linkedin\");\n};\n_c3 = LinkedIn;\nexport var Github = function Github(_ref3) {\n  var user = _ref3.user;\n  return BaseLink(user, \"github\");\n};\n_c4 = Github;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"BaseLink\");\n$RefreshReg$(_c2, \"Twitter\");\n$RefreshReg$(_c3, \"LinkedIn\");\n$RefreshReg$(_c4, \"Github\");","map":{"version":3,"sources":["/home/andri/git/andri.dk/src/components/social-icons/index.js"],"names":["React","FaTwitter","TwitterIcon","FaLinkedin","LinkedInIcon","FaGithub","GithubIcon","iconResolver","type","Error","linkResolver","user","BaseLink","Icon","href","Twitter","LinkedIn","Github"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,SAAS,IAAIC,WADf,EAEEC,UAAU,IAAIC,YAFhB,EAGEC,QAAQ,IAAIC,UAHd,QAIO,gBAJP;;AAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,UAAQA,IAAR;AACE,SAAK,SAAL;AACE,aAAON,WAAP;;AACF,SAAK,UAAL;AACE,aAAOE,YAAP;;AACF,SAAK,QAAL;AACE,aAAOE,UAAP;;AACF;AACE,YAAM,IAAIG,KAAJ,iBAAmBD,IAAnB,iCAAN;AARJ;AAUD,CAXD;;AAaA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOH,IAAP,EAAgB;AACnC,UAAQA,IAAR;AACE,SAAK,SAAL;AACE,+CAAkCG,IAAlC;;AACF,SAAK,QAAL;AACE,0CAA6BA,IAA7B;;AACF,SAAK,UAAL;AACE,mDAAsCA,IAAtC;;AACF;AACE,YAAM,IAAIF,KAAJ,iBAAmBD,IAAnB,iCAAN;AARJ;AAUD,CAXD;;AAaA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACD,IAAD,EAAOH,IAAP,EAAgB;AAC/B,MAAMK,IAAI,GAAGN,YAAY,CAACC,IAAD,CAAzB;AACA,MAAMM,IAAI,GAAGJ,YAAY,CAACC,IAAD,EAAOH,IAAP,CAAzB;AACA,SACE;AAAG,IAAA,IAAI,EAAEM,IAAT;AAAe,IAAA,MAAM,EAAC,QAAtB;AAA+B,IAAA,GAAG,EAAC,qBAAnC;AAAyD,IAAA,SAAS,EAAC,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CARD;;KAAMF,Q;AAUN,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAGJ,IAAH,QAAGA,IAAH;AAAA,SAAcC,QAAQ,CAACD,IAAD,EAAO,SAAP,CAAtB;AAAA,CAAhB;MAAMI,O;AACb,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGL,IAAH,SAAGA,IAAH;AAAA,SAAcC,QAAQ,CAACD,IAAD,EAAO,UAAP,CAAtB;AAAA,CAAjB;MAAMK,Q;AACb,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAGN,IAAH,SAAGA,IAAH;AAAA,SAAcC,QAAQ,CAACD,IAAD,EAAO,QAAP,CAAtB;AAAA,CAAf;MAAMM,M","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  FaTwitter as TwitterIcon,\r\n  FaLinkedin as LinkedInIcon,\r\n  FaGithub as GithubIcon,\r\n} from \"react-icons/fa\";\r\n\r\nconst iconResolver = (type) => {\r\n  switch (type) {\r\n    case \"twitter\":\r\n      return TwitterIcon;\r\n    case \"linkedin\":\r\n      return LinkedInIcon;\r\n    case \"github\":\r\n      return GithubIcon;\r\n    default:\r\n      throw new Error(`Type '${type}' not found in iconResolver`);\r\n  }\r\n};\r\n\r\nconst linkResolver = (user, type) => {\r\n  switch (type) {\r\n    case \"twitter\":\r\n      return `https://www.twitter.com/${user}`;\r\n    case \"github\":\r\n      return `https://github.com/${user}`;\r\n    case \"linkedin\":\r\n      return `https://www.linkedin.com/in/${user}`;\r\n    default:\r\n      throw new Error(`Type '${type}' not found in linkResolver`);\r\n  }\r\n};\r\n\r\nconst BaseLink = (user, type) => {\r\n  const Icon = iconResolver(type);\r\n  const href = linkResolver(user, type);\r\n  return (\r\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" className=\"mr-2\">\r\n      <Icon className=\"inline-block\" />\r\n    </a>\r\n  );\r\n};\r\n\r\nexport const Twitter = ({ user }) => BaseLink(user, \"twitter\");\r\nexport const LinkedIn = ({ user }) => BaseLink(user, \"linkedin\");\r\nexport const Github = ({ user }) => BaseLink(user, \"github\");\r\n"]},"metadata":{},"sourceType":"module"}
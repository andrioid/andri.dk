{"componentChunkName":"component---src-layouts-blog-post-tsx","path":"/blog/calling-your-own-functions-from-jquery","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://andri.dk","title":"andri.dk","description":"I make websites, create apps, manage infrastructure, develop products and more.","social":{"twitter":"andrioid"}}},"markdownRemark":{"html":"<p><strong>As a part of my site restoration, this page was salvaged and may not be up to date</strong> I've been playing around with jQuery for a week or so, without any prior experience with Javascript. jQuery is absolutely brilliant and it's quite easy to do different things with it. However, when I started doing repetitive tasks, i wanted to create a function to do it; instead of repeating my code at multiple places. This is where I had problems, because my 'updateTable' function had no idea what $() was and no jQuery functions worked after I started calling my 'updateTable' function from the jQuery context. Well, today I got it to work by sending the jQuery object to my function. <strong>Old function (does not work)</strong></p>\n<blockquote>\n<p>function updateTable () { /* Call jQuery stuff (for example, change forms) */ } $(function() { $(document).ready(function() { updateTable(); }); });</p>\n</blockquote>\n<p>After spending a couple of days scratching my head and reading a bit about Javascript, this was 'obviously' a problem of my function not knowing the jQuery context or any of the objects inside it. There is probably a smarter way of doing this; but I at least solved my problem by appending the jQuery object '$' to the function, as follows. <strong>New, less crappy version</strong></p>\n<blockquote>\n<p>function updateTable ($) { /* Call jQuery stuff (for example, change forms) */ } $(function() { $(document).ready(function() { updateTable($); }); });</p>\n</blockquote>\n<p><strong>Update: Arnórs' suggestion</strong><br>\nArnór suggested that declaring the functions after $(document).ready will make all functions after that aware of the jQuery object (makes sense, but I haven't tried it).</p>\n<blockquote>\n<p>$(function() { $(document).ready(function() { function updateTable ($) { /* Call jQuery stuff (for example, change forms) */ } updateTable(); }); });</p>\n</blockquote>\n<p><strong>Update: Guðmundur suggested creating a jQuery plugin</strong><br>\nI decided to go with this advice everything is working so far. I recommend <a href=\"https://blog.jeremymartin.name/2008/02/building-your-first-jquery-plugin-that.html\">this article</a> as well.</p>\n<blockquote>\n<p>$(function() { $.fn.updateCart = function() { /* Misc jQuery stuff */ }; $(document).ready(function() { ('#mytable').updateTable(); }); });</p>\n</blockquote>\n<p>As a footnote; I'm no Javascript or Jquery expert. Been playing around for a week and I found this information extremely hard to come by, so if it can help anyone else who's beginning to play with jQuery, then great..</p>","excerpt":"As a part of my site restoration, this page was salvaged and may not be up to date I've been playing around with jQuery for a week or so, without any prior experience with Javascript. jQuery is absolutely brilliant and it's quite easy to do different…","fields":{"title":"Calling your own functions from jQuery","date":"2010-08-10T16:23:57.000Z","tags":["blog"],"slug":"/blog/calling-your-own-functions-from-jquery","socialcard":"gatsby-plugin-social-card/ce1f33b1-d2ac-56bf-acf8-d79667b9187a.jpg"},"frontmatter":{"date":"August 10, 2010","cover":null}}},"pageContext":{}},"staticQueryHashes":["2070580351"]}
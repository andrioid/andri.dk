---
import { twMerge } from "tailwind-merge";
import type { dataTransform } from "../../lib/cv";
import SkillIcon from "./skill-icon.astro";

type Props = {
	dt: ReturnType<typeof dataTransform>;
};

const { dt } = Astro.props;
---

<div id="skills" class="mt-8 flex flex-col items-center max-w-[50em]">
	<ul class="flex flex-wrap justify-center gap-2">
		{
			dt.map((skill, index) => (
				<li
					role="button"
					class="skill bg-sky-800 px-3 py-1 rounded-full text-sm hover:bg-sky-600 transition-colors text-sky-100 aria-selected:bg-sky-600"
				>
					<a href={`#${skill.id}`}>{skill.name}</a>
				</li>
			))
		}
	</ul>
	<div class="h-[10em]">
		{
			dt.map((skill, index) => (
				<ul
					id={skill.id}
					class={twMerge(
						"hidden flex-wrap justify-center gap-x-4 gap-y-4 mt-8",
						`target:flex`
					)}
				>
					{skill.keywords.map((k) => (
						<li
							class={twMerge(
								"group relative flex flex-row items-center md:text-lg px-3 py-1 rounded-full bg-sky-100 text-sky-800",
								k.score > 1 && "cursor-help"
							)}
						>
							<SkillIcon className="mr-2" skill={k} /> {k.name}
							{k.score > 1 && (
								<div class="invisible group-hover:visible z-10 drop-shadow-md bg-pink-600 text-white font-bold rounded-full text-xs -bottom-2 -right-2 absolute px-2">
									{`${k.score}+ years`}
								</div>
							)}
						</li>
					))}
				</ul>
			))
		}
	</div>
</div>

<script>
	/* TODO: Finish this
	const skillItems = document.querySelectorAll<HTMLLIElement>("li.skill");
	const skillLinks =
		document.querySelectorAll<HTMLAnchorElement>("li.skill a");
	let i = 0;

	const rotating = setInterval(() => {
		skillLinks[i].click();

		if (i < skillLinks.length - 1) {
			i++;
		} else {
			i = 0;
		}
	}, 2000);

	const skillDiv = document.querySelector<HTMLDivElement>("#skills");
	skillDiv?.addEventListener("mouseenter", () => {
		clearInterval(rotating);
	});
	*/
</script>
